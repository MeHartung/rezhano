<?php
/**
 * Created by PhpStorm.
 * User: eobuh
 * Date: 16.05.2018
 * Time: 18:33
 */

namespace Tests\StoreBundle\Controller\Admin\TreeAdmin;


use StoreBundle\DataFixtures\Taxon\LastChildTestTaxonFixtures;
use StoreBundle\DataFixtures\Taxon\TaxonMoveNodeTestFixture;
use StoreBundle\DataFixtures\UserFixtures;
use StoreBundle\Entity\Store\Catalog\Taxonomy\Taxon;
use Tests\StoreBundle\StoreWebTestCase;

class TreeAdminControllerTest extends StoreWebTestCase
{
    public function setUp()
    {
        $this->client = static::createClient();

        #parent::setUp(); // TODO: Change the autogenerated stub
        $this->addFixture(new UserFixtures());
        $this->executeFixtures();

    }

    public function testMoveNode()
    {
        $this->appendFixture(new TaxonMoveNodeTestFixture(), true);

        $this->logIn();
        $taxonRepo = $this->getEntityManager()->getRepository(Taxon::class);

        $conn = $this->getEntityManager()->getConnection();

        $smartphoneTaxon = $this->getByReference("tm-smartphone");
        $etcTaxon = $this->getByReference("tm-etc");
        $root = $smartphoneTaxon->getParent();

        # поменяем первый => последний
        $uri = sprintf("/admin/tree/data?_sonata_admin=app.admin.catalog.taxon&operation=move_node&id=%s&parent_id=%s&position=%s",
                        $smartphoneTaxon->getId(), $root->getId(), count($root->getChildren())-1);

        $this->client->request("GET", $uri);

        $this->getEntityManager()->clear();

        $smartphoneTaxonFromDb = $this->getEntityManager()->find(Taxon::class, $smartphoneTaxon->getId());
        $this->assertEquals(31, $smartphoneTaxonFromDb->getTreeRight());
        $this->assertEquals(16, $smartphoneTaxonFromDb->getTreeLeft());
        $this->assertEquals(1, $smartphoneTaxonFromDb->getTreeLevel());

        $etcTaxonFromDb = $this->getEntityManager()->find(Taxon::class, $etcTaxon->getId());
        $this->assertEquals(15, $etcTaxonFromDb->getTreeRight());
        $this->assertEquals(14, $etcTaxonFromDb->getTreeLeft());
        $this->assertEquals(1, $etcTaxonFromDb->getTreeLevel());

        # проверим что дерево здорово
        $this->treeNotSad($conn);

        # перенесём эл-т 3 уровня к другому родителю ( в прочее из сумок)
        $bagTaxonMonitor = $this->getByReference("tm-bag-monitor");

        $uri = sprintf("/admin/tree/data?_sonata_admin=app.admin.catalog.taxon&operation=move_node&id=%s&parent_id=%s&position=%s",
            $bagTaxonMonitor->getId(), $etcTaxon->getId(), 0);

        $this->client->request("GET", $uri);

        $this->getEntityManager()->clear();

        $bagTaxonMonitorFromDb = $this->getEntityManager()->find(Taxon::class, $bagTaxonMonitor->getId());
        $this->assertEquals(14, $bagTaxonMonitorFromDb->getTreeRight());
        $this->assertEquals(13, $bagTaxonMonitorFromDb->getTreeLeft());
        $this->assertEquals(2, $bagTaxonMonitorFromDb->getTreeLevel());

        $etcTaxonFromDb = $this->getEntityManager()->find(Taxon::class, $etcTaxon->getId());
        $this->assertEquals(15, $etcTaxonFromDb->getTreeRight());
        $this->assertEquals(12, $etcTaxonFromDb->getTreeLeft());
        $this->assertEquals(1, $etcTaxonFromDb->getTreeLevel());

        # проверим что дерево здорово
        $this->treeNotSad($conn);

        # перенесём раздел 3 уровня с детьми на 2 уровень 2ым по счёту
        $smartphoneMiTaxon = $this->getByReference("tm-smartphone-mi");
        $uri = sprintf("/admin/tree/data?_sonata_admin=app.admin.catalog.taxon&operation=move_node&id=%s&parent_id=%s&position=%s",
            $smartphoneMiTaxon->getId(), $root->getId(), 1);

        $this->client->request("GET", $uri);

        $this->getEntityManager()->clear();
        $smartphoneMiTaxonFromDb = $this->getEntityManager()->find(Taxon::class, $smartphoneMiTaxon->getId());
        $this->assertEquals(19, $smartphoneMiTaxonFromDb->getTreeRight());
        $this->assertEquals(12, $smartphoneMiTaxonFromDb->getTreeLeft());
        $this->assertEquals(1, $smartphoneMiTaxonFromDb->getTreeLevel());

        $this->getEntityManager()->clear();
        $rootFromDb = $this->getEntityManager()->find(Taxon::class, $root->getId());

        $this->getEntityManager()->clear();
        $nodeQb = $taxonRepo->childrenQueryBuilder($rootFromDb);
        $nodes = $nodeQb->andWhere('node.treeLevel < :maxTreeLevel')
                        ->setParameter('maxTreeLevel', 2)
                        ->getQuery()
                        ->getArrayResult();

        $rootChildren = $taxonRepo->buildTreeArray($nodes);

        $this->assertEquals("TV", $rootChildren[0]["name"]);
        $this->assertEquals("Сумки", $rootChildren[1]["name"]);
        $this->assertEquals("mi", $rootChildren[2]["name"]);
        $this->assertEquals("Прочее", $rootChildren[3]["name"]);
        $this->assertEquals("Смартфоны", $rootChildren[4]["name"]);

        $this->treeNotSad($conn);

    }

    private function treeNotSad($conn)
    {
        $q1 = $conn->prepare("SELECT tree_left FROM catalog_sections GROUP BY tree_left HAVING count(*)>1;");
        $q1->execute();
        $this->assertCount(0, $q1->fetchAll(), "Дереву плохо, у него дубли значений tree_left");

        $q1 = $conn->prepare("SELECT tree_right FROM catalog_sections GROUP BY tree_right HAVING count(*)>1");
        $q1->execute();
        $this->assertCount(0, $q1->fetchAll(), "Дереву плохо, у него дубли значений tree_right");

        $q1 = $conn->prepare("SELECT * FROM catalog_sections  WHERE tree_right <= tree_left");
        $q1->execute();
        $this->assertCount(0, $q1->fetchAll(), "Дереву плохо, у него tree_right < tree_left");
    }

}