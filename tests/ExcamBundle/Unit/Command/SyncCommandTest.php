<?php
/**
 * Created by PhpStorm.
 * User: evgeny
 * Date: 26.03.18
 * Time: 19:11
 */

namespace StoreBundle\Unit\Command;


use Accurateweb\SynchronizationBundle\Command\SynchronizationRunCommand;
use StoreBundle\Entity\Store\Catalog\Product\Product;
use Symfony\Component\Console\Tester\CommandTester;
use Tests\StoreBundle\StoreWebTestCase;

class SyncCommandTest extends StoreWebTestCase
{
  public function setUp()
  {
    parent::setUp(); // TODO: Change the autogenerated stub
  }

  public function testLocalSync()
  {

   $filepath =  $this->client->getContainer()->get('kernel')->getRootDir() . "\\..\\tests\\StoreBundle\\Fixtures\\product_list.xml";
   $filepath = str_replace('\\', '/', $filepath);

   $output =  $this->runCommand($filepath);
   $this->assertEquals("Synchronization complete", preg_replace('/[^a-zA-Z0-9\s+]/', '', $output));

   /** @var \SimpleXMLElement $xmlProducts */
   $xmlProducts = simplexml_load_file($filepath);

   foreach ($xmlProducts as $xmlProduct)
   {
    $sku = (string)$xmlProduct->sku;
    $price = (string)$xmlProduct->retail_price;
    $product = $this->getEntityManager()->getRepository(Product::class)->findBy(["sku"=> $sku]);
    $product = is_array($product)? $product[0] : $product;
    $this->assertEquals($price, $product->getPrice());
   }

  }

  public function runCommand($filepath)
  {
    $application = $this->application;

    $application->add(new SynchronizationRunCommand());

    $command = $application->find('synchronization:run');
    $commandTester = new CommandTester($command);
    $commandTester->execute(array(
      'command' => $command->getName(),
      'subject' => 'products',
      '--datasource' => 'local',
      '--filename' =>$filepath
    ));

    return $output = $commandTester->getDisplay();
  }


}